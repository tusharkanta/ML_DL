# -*- coding: utf-8 -*-
"""gradcamresult.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YmUns1pz3y0MRMthhxakqWyTxxCHO5qm
"""

import utils as utils
from utils import visualize_cam, Normalize
from gradcamfl import GradCAM, GradCAMpp
import os
from torchvision.utils import make_grid, save_image
import torchvision.models as models
import torch.nn.functional as F
import PIL
import matplotlib.pyplot as plt
import numpy as np
import torch

# Commented out IPython magic to ensure Python compatibility.
def get_gradcam_op (model,layer):
  
  cam_dict = dict()
  resnet = model
  resnet.eval(), resnet.cuda()
  resnet_model_dict = dict(type='resnet', arch=resnet, layer_name=layer, input_size=(32, 32))
  resnet_gradcam = GradCAM(resnet_model_dict, True)
  resnet_gradcampp = GradCAMpp(resnet_model_dict, True)
  cam_dict['resnet'] = [resnet_gradcam, resnet_gradcampp]
  img_dir = '/content/testimagedummy'
  # img_name = 'collies.JPG'
  # img_name = 'multiple_dogs.jpg'
  # img_name = 'snake.JPEG'
  #os.makedirs(img_dir, exist_ok=True)
  img_name = 'dog5.png'
  img_path = os.path.join(img_dir, img_name)
  print("image_Path",img_path)
  pil_img = PIL.Image.open(img_path)
  plt.imshow(pil_img)
  
  
  normalizer = Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
  torch_img = torch.from_numpy(np.asarray(pil_img)).permute(2, 0, 1).unsqueeze(0).float().div(255).cuda()
  torch_img = F.upsample(torch_img, size=(32, 32), mode='bilinear', align_corners=False)
  normed_torch_img = normalizer(torch_img)
  images = []
  for gradcam, gradcam_pp in cam_dict.values():
      mask, _ = gradcam(normed_torch_img)
      heatmap, result = visualize_cam(mask.cpu(), torch_img.squeeze().cpu())

      mask_pp, _ = gradcam_pp(normed_torch_img)
      heatmap_pp, result_pp = visualize_cam(mask_pp.cpu(), torch_img.squeeze().cpu())
      
      images.append(torch.stack([torch_img.squeeze().cpu(), heatmap, heatmap_pp, result, result_pp], 0))
      #images.append(torch.stack([torch_img.squeeze().cpu(), heatmap, result], 0))
      
  images = make_grid(torch.cat(images, 0), nrow=5)
  output_dir = 'outputs'
#   %cd '/content/testimagedummy/'
  os.makedirs(output_dir, exist_ok=True)
  output_name = img_name
  output_dir='/content/testimagedummy/outputs'
  output_path = os.path.join(output_dir, output_name)
  print(output_path)
  save_image(images, output_path)
  pil_img_op=PIL.Image.open(output_path)
  plt.imshow(pil_img_op)