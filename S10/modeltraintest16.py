# -*- coding: utf-8 -*-
"""ModelTrainTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzcHzd5b9bu_7ZC-9dAocynBGlRP-gCj
"""



# Commented out IPython magic to ensure Python compatibility.

from tqdm import tqdm
import matplotlib.pyplot as plt
import numpy as np
import torch.nn.functional as F
import torch
import torch.nn as nn
from lr_finder import LRFinder


train_losses_normal = []
test_losses_normal = []
train_acc_normal = []
test_acc_normal = []

def train(model, device, train_loader, optimizer, epoch):
  model.train()
  pbar = tqdm(train_loader)
  correct = 0
  processed = 0
  for batch_idx, (data, target) in enumerate(pbar):
    # get samples
    data, target = data.to(device), target.to(device)
    #print('batch idx',batch_idx)
    # Init
    optimizer.zero_grad()
    # In PyTorch, we need to set the gradients to zero before starting to do backpropragation because PyTorch accumulates the gradients on subsequent backward passes. 
    # Because of this, when you start your training loop, ideally you should zero out the gradients so that you do the parameter update correctly.

    # Predict
    y_pred = model(data)

    # Calculate loss
    loss = F.nll_loss(y_pred, target)
    
    train_losses_normal.append(loss)

    # Backpropagation
    loss.backward()
    optimizer.step()

    # Update pbar-tqdm
    
    pred = y_pred.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
    correct += pred.eq(target.view_as(pred)).sum().item()
    processed += len(data)

    pbar.set_description(desc= f'Loss={loss.item()} Accuracy={100*correct/processed:0.2f}')
  train_acc_normal.append(100. * correct/processed)

def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    test_losses_normal.append(test_loss)

    print('\nTest set: Avg loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))
    
    test_acc_normal.append(100. * correct / len(test_loader.dataset))
    return test_loss

def lrfinder (model, device, train_loader, optimizer):
  criterion = nn.NLLLoss().cuda()
  #criterion = nn.CrossEntropyLoss()
  lr_finder = LRFinder(model, optimizer, criterion, device="cuda")
  num_iter=int(len(train_loader.dataset)/train_loader.batch_size)
  lr_finder.range_test(train_loader, end_lr=100, num_iter=num_iter, step_mode="exp")
  lr_finder.plot()
  lr_finder.reset()

def plotaccuracy ():
    fig, axs = plt.subplots(1, 1, figsize=(15, 10))
    print(len(train_acc_normal))
    axs.plot(test_acc_normal, label='Test Accuracy')
    axs.plot(train_acc_normal, label='Train Accuracy')
    #axs[0].plot(test_acc_normal, label='Test Accuracy')
    axs.set_title("Accuracy")
    axs.legend(loc="upper left")